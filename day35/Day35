# Day 35: 代码随想录算法训练营 补！！！

## Topic:
- Dynamic Programming

## Summary:
- 动态规划中每一个状态一定是由上一个状态推导出来的
- DP五部曲
  - 确定dp数组（dp table）以及下标的含义 （！！！）
  - 确定递推公式 （！！！）
  - dp数组如何初始化
  - 确定遍历顺序
  - 举例推导dp数组
- 今天学习了0/1 背包 很复杂。 这里面的关键点是 每个物品有两个状态 拿还不是不拿 
  - 不拿就是dp[i-1][j]
  - 拿的话 就是要dp[i-1][j-weight[j]] 当前背包减去物品的重量的最优价值
  - dp 公式 = max（dp[i-1][j], dp[i-1][j-w[j]] + value[i]）
- 空间缩减 用倒序遍历重要 从后往前就不会影响到前面的数字了

## Leetcode Problem
[Recourse](https://programmercarl.com/0416.%E5%88%86%E5%89%B2%E7%AD%89%E5%92%8C%E5%AD%90%E9%9B%86.html#%E7%AE%97%E6%B3%95%E5%85%AC%E5%BC%80%E8%AF%BE)

leetcode 416
这个问题可以抽象成01背包 每个数字拿还不是拿 拿了能不能组成target sum
```java
class Solution {
    public boolean canPartition(int[] nums) {
        // dp[j] 最大价值当背包有j的重量
        int sum = 0;
        for (int num : nums) {
            sum += num;
        }
        if (sum % 2 != 0) return false;
        int target =sum / 2;

        int[] dp = new int[target + 1];
        for (int i = 0; i< nums.length; i++) {
            for (int j = target; j >= nums[i]; j--) {
                dp[j] = Math.max(dp[j], dp[j - nums[i]] + nums[i]);
            }
        }

        return dp[target] == target;
    }
}
```
